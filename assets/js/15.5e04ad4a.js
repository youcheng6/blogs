(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{369:function(n,r,v){"use strict";v.r(r);var e=v(43),_=Object(e.a)({},(function(){var n=this,r=n.$createElement,v=n._self._c||r;return v("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[v("h2",{attrs:{id:"深入理解js原型链"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#深入理解js原型链"}},[n._v("#")]),n._v(" 深入理解js原型链")]),n._v(" "),v("p",[n._v("什么是原型"),v("br"),n._v("\nJS是一个基于对象的脚本语言，和java等面向对象语言最大不同是："),v("br"),n._v("\nJS中没有类的概念（PS:ES6的类只是一种语法糖）")]),n._v(" "),v("p",[n._v("原型就好比面向对象中的 类（模具），没有类，就没有对象")]),n._v(" "),v("p",[n._v("面向对象语言中，要先定义类才能创建对象"),v("br"),n._v("\nJS中，无须定义原型就可以直接创建对象")]),n._v(" "),v("p",[n._v("例子：")]),n._v(" "),v("p",[n._v("|对象原型 -- Object.prototype"),v("br"),n._v("\n|数组原型 -- Array.prototype"),v("br"),n._v("\n|方法原型 -- Function.prototype")]),n._v(" "),v("p",[n._v("原型的创建时机与修改"),v("br"),n._v("\n当函数定义的时候，原型就创建了"),v("br"),n._v("\nconsole.log(Person.prototype);  //已经存在")]),n._v(" "),v("p",[n._v("function Person(){"),v("br"),n._v('\nthis.name = "xxx";'),v("br"),n._v("\n}")]),n._v(" "),v("p",[n._v("console.log(Person.prototype);  //已经存在"),v("br"),n._v("\n如果更改原型对象的属性，所有相关对象都会生效，无论是改前还是改后创建的对象"),v("br"),n._v("\nfunction Person(){"),v("br"),n._v('\nthis.name = "xxx";'),v("br"),n._v("\n}")]),n._v(" "),v("p",[n._v("var a = new Person();"),v("br"),n._v("\na.age  // undefined"),v("br"),n._v("\nPerson.prototype.age = 100;"),v("br"),n._v("\nvar b = new Person();"),v("br"),n._v("\na.age  // 100"),v("br"),n._v("\nb.age  // 100")]),n._v(" "),v("ul",[v("li",[n._v("如果更改原型对象本身，那么在改前创建的对象，它的原型还是指向改前的原型对象，而改后创建的对象，它的原型才会指向改后的原型对象"),v("br"),n._v("\nfunction Person(){"),v("br"),n._v('\nthis.name = "xxx";'),v("br"),n._v("\n}")])]),n._v(" "),v("p",[n._v("var a = new Person();"),v("br"),n._v("\nPerson.prototype = {age:120};"),v("br"),n._v("\nvar b = new Person();")]),n._v(" "),v("p",[n._v("a.age // undefined"),v("br"),n._v("\nb.age // 120"),v("br"),n._v("\n什么是原型链？作用是什么？"),v("br"),n._v("\n原型链就是原型与原型之间的关联")]),n._v(" "),v("p",[n._v("作用：用于实现继承，原型之间的继承，对象之间的继承"),v("br"),n._v("\n注意：JS内部继承的实现就是靠原型链，没有原型链就没有继承")])])}),[],!1,null,null,null);r.default=_.exports}}]);